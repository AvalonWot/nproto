package io.nproto.example;

import io.nproto.ByteString;
import io.nproto.Internal;
import io.nproto.runtime.MessageRuntime;
import io.nproto.runtime.MessageRuntimeBuilder;
import io.nproto.runtime.MessageRuntimeContainer;

import java.util.Collection;
import java.util.List;

/**
 * The implementation for a message that was generated by some version of the proto compiler.
 */
public final class SimpleMessageImpl extends SimpleMessage implements MessageRuntimeContainer<SimpleMessage> {
  private final SimpleMessageRuntime runtime;

  /**
   * Protected because it's needed by the {@link SimpleMessageRuntime#getDefaultInstanceForType()}.
   */
  @Internal
  SimpleMessageImpl(SimpleMessageRuntime runtime) {
    this.runtime = runtime;
  }

  @Override
  public MessageRuntime<SimpleMessage, ? extends MessageRuntime> getRuntime() {
    return runtime;
  }

  @Override
  public int getInt() {
    return runtime.getInt();
  }

  @Override
  public long getLong() {
    return runtime.getLong();
  }

  @Override
  public boolean getBool() {
    return runtime.getBool();
  }

  @Override
  public String getString() {
    return runtime.getString();
  }

  @Override
  public ByteString getBytes() {
    return runtime.getBytes();
  }

  @Override
  public List<Integer> getRepeated() {
    return runtime.getRepeated();
  }

  @Override
  public Builder newBuilder() {
    return new BuilderImpl();
  }

  @Override
  public Builder toBuilder() {
    return new BuilderImpl(runtime, true /* copyOnWrite */);
  }

  private static final class BuilderImpl extends SimpleMessage.Builder implements MessageRuntimeBuilder<SimpleMessage> {
    private SimpleMessageRuntime runtime;
    private boolean copyOnWrite;

    private BuilderImpl() {
      runtime = new SimpleMessageRuntime();
    }

    private BuilderImpl(SimpleMessageRuntime runtime, boolean copyOnWrite) {
      this.runtime = runtime;
      this.copyOnWrite = copyOnWrite;
    }

    @Override
    public MessageRuntime<SimpleMessage, ? extends MessageRuntime> getRuntime() {
      return runtime;
    }

    @Override
    public void setInt(int value) {
      copyIfNeeded();
      runtime.setInt(value);
    }

    @Override
    public void setLong(long value) {
      copyIfNeeded();
      runtime.setLong(value);
    }

    @Override
    public void setBool(boolean value) {
      copyIfNeeded();
      runtime.setBool(value);
    }

    @Override
    public void setString(String value) {
      copyIfNeeded();
      runtime.setString(value);
    }

    @Override
    public void setBytes(ByteString value) {
      copyIfNeeded();
      runtime.setBytes(value);
    }

    @Override
    public void addRepeated(Integer value) {
      copyIfNeeded();
      runtime.getOrCreateRepeated().add(value);
    }

    @Override
    public void addAllRepeated(Collection<Integer> values) {
      copyIfNeeded();
      runtime.getOrCreateRepeated().addAll(values);
    }

    @Override
    public void mergeFrom(byte[] data) {
      copyIfNeeded();
      runtime.mergeFrom(data);
    }

    @Override
    public SimpleMessage build() {
      copyOnWrite = true;
      return new SimpleMessageImpl(runtime.makeImmutable());
    }

    private void copyIfNeeded() {
      if (copyOnWrite) {
        copyOnWrite = false;
        runtime = runtime.mutableCopy();
      }
    }
  }
}
